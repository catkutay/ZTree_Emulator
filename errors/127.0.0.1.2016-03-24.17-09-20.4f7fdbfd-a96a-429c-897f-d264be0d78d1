(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'/usr/local/web2py/applications/ZTree/controllers/experiments.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport gluon.contrib.simplejson\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    return dict(pages=auth.wiki(\'help\'))\n\ndef display_results():\n    form = FORM(TABLE(TR(\'Experiment ID:\',\n              INPUT(_name=\'experiment_id\', requires=IS_NOT_EMPTY())),\n\t     TR(\'Stage Number (optional)\', INPUT(_name=\'stage_number\' )),\n\t\tTR(\'Round ID\',INPUT(_name=\'round_id\')),\n\t\tTR(INPUT(_name=\'name\',_value="Results",_type="hidden")),\n              TR("",INPUT(_type=\'submit\'))))\n    if form.process().accepted:\n        session.flash = \'form accepted\'\n        redirect(URL(f=\'results\',vars=request.vars))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\n\ndef help():\n\n    return auth.wiki(\'help\')\n\ndef participant():\n    if (request.vars):\n        value=request.vars\n        variable=value.keys()\n\tparticipant=None\n\n        #check what order put in - exp_id set and variableData is being reviewd\n        if (variable[0]=="experiment_id"):\n                participant=variable[1]\n                exp_id=value[variable[0]]\n\n\telse:\n            try:\n                participant=variable[0]\n                exp_id=value[variable[1]]\n            except:\n                return " You need to provide experiment id"\n        ip = request.client\n        part=db.participant((db.participant.IP==ip))\n        ##check to see if cna fit in experiment\n        max_participants=db.setupExperiment((db.setupExperiment.name=="max_participants")&(db.setupExperiment.experiment_id==exp_id))[\'valueString\']\n        parts=db(db.experiment_participant.experiment_id==exp_id)\n\t#eresetting to zero\n\tif value["participant"]=="-1":\n                parts.delete()\n                        ##reset participant to zero and return values\n                ret=db.setupExperiment((db.setupExperiment.name=="participant") & (db.setupExperiment.experiment_id==exp_id))\n                ret.update_record(valueString=0)\n                db.commit()\n\t\treturn "Start New Group as Host Server"\n\t#expereiment not fulli add expereimenter\n\telif value["participant"]=="0":\n\t\treturnvar= dict([("message","experimenter"),("participant","0"),("experimental_id",exp_id),("participant_id","0")])\n\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\n\telif ((parts.count())<max_participants):\n                if (part==None):\n                        part_id=db.participant.insert(IP=ip,model_name="default")\n\n                else:\n                        part_id=part[\'id\']\n\telse:\n\t\treturnvar= dict([("message","full"),("participant","-1"),("experimental_id",exp_id),("participant_id","-1")])\n\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\n\n\t#setup participatn in experiment as there is room\n\tdb.experiment_participant.insert(experiment_id=exp_id,participant_id=part_id)\n        db.commit()\n\t#get exisitng setup data\n        ret=db.setupExperiment((db.setupExperiment.name=="participant") & (db.setupExperiment.experiment_id==exp_id))\n        if (ret==None):\n\t\t# no entry for participants, so create one\n                if value["participant"]!="":\n                        db.setupExperiment.insert(name="participant", valueString=value["participant"], experiment_id=exp_id)\n                        db.commit()\n\t\t\treturnvar= dict([("participant",str(value["participant"])),("experimental_id",exp_id), ("participant_id",part_id)])\n                        return gluon.contrib.simplejson.dumps(returnvar)\n                else:\n                        return "Please enter value for participant"\n\t#if paricipant number set and already exists\n        if (value["participant"]!=""):\n\t\t#done zero already\n                ##if integer increment, if not, just put in data given\n                ret.update_record(valueString=int(ret.valueString)+int(value[participant]))\n\n\t#return all values\n\n        returnvar= dict([("participant",str(ret.valueString)),("experimental_id",exp_id),("participant_id",part_id)])\n        return gluon.contrib.simplejson.dumps(returnvar)\n    else:\n        return "Error no parameter provided to read for participant"\n\ndef reset():\n        ret = db().select(db.experiment.ALL)\n\n        form=FORM("Experiment record to delete: ",SELECT(_name=\'title\', *[OPTION(ret[i].title,_value=ret[i].title) for i in range (len(ret))]),INPUT(_type="Submit"))\n        if form.accepts(request.vars):\n\n                ret=db.experiment((db.experiment.title==request.vars[\'title\']))\n                if (ret!=None):\n                        form=FORM(INPUT(_name="experiment_id",_value=ret.id,_type="hidden"),"Delete ?:",INPUT(_type="Checkbox",_name="delete"),INPUT(_type=\'submit\'))\n                        returnvar=dict([("Title",ret.title),("ExperimentType",ret.typeExperiment), ("start", False), ("delete",False),("form", form)])\n\n                        return returnvar\n                else:\n                        return "No such experiment"\n        else:\n                #second pass- so using different form\n                if request.vars:\n                        if (request.vars[\'delete\']==\'on\'):\n                        #delete\n                                ret=db.setupExperiment((db.setupExperiment.name=="Host_IP") & (db.setupExperiment.experiment_id==request.vars[\'experiment_id\']))\n                                if ret:ret.update_record(valueString="127.0.0.1")\n\n                                ret=db.setupExperiment((db.setupExperiment.name=="Port") & (db.setupExperiment.experiment_id==request.vars[\'experiment_id\']))\n                                if ret:ret.update_record(valueString="1100")\n\n                                ret=db.setupExperiment((db.setupExperiment.name=="participant") & (db.setupExperiment.experiment_id==request.vars[\'experiment_id\']))\n                                if ret:ret.update_record(valueString="0")\n\n                                ret=db((db.results.experiment_id==request.vars[\'experiment_id\']))\n                                if (ret):ret.delete()\n\n                                return dict(start=False, delete=True)\n                return dict(form=form, start=True, delete=False)\n\ndef setup_interface():\n\n        #request for form from interface\n        form=FORM("Experiment Title",INPUT(_name="Title"),\n                INPUT(_value="max_participants",_type="hidden"),"Maximum Participants: ",INPUT(_name="valueString"),\n                INPUT(_value="Host_IP",_type="hidden"),"Host: ",INPUT(_value="127.0.0.1",_name="valueString"),\n                INPUT(_value="Port",_type="hidden"),"Port: ",INPUT(_value="1100",_name="valueString"),\n                "Type of Experiment",SELECT(\'coin effort\', \'stag and hare\' ,_name="typeExperiment"),\n                "A Parameter: ", INPUT(_name=\'valueString\'),\n                "B Parameter: ", INPUT(_name=\'valueString\'),\n                "Rounds : ", INPUT(_name="rounds"),\n                INPUT(_type="submit"))\n        if form.accepts(request.vars):\n                name=[\'max_participants\',\'Host_IP\',\'Port\',\'a_parameter\',\'b_parameter\']\n                values=request.vars[\'valueString\']\n\n                #insert experiment name etc\n                exp_id=db.experiment.insert( title=request.vars[\'Title\'],typeExperiment=request.vars[\'typeExperiment\'],rounds=request.vars[\'rounds\']).id\n                \n                #now insert the array of named vars\n                i=0\n                while i<len(values):\n                        db.setupExperiment.insert(name=name[i], valueString=values[i], experiment_id=exp_id)\n                        i+=1\n                #default\n                db.setupExperiment.insert(name="participant", valueString=0, experiment_id=exp_id)\n                response.flash = \'form accepted\'\n                #cheating a bit\n                return dict(form="Experiment entered, id ="+str(exp_id))\n        elif form.errors:\n                response.flash = \'form has errors\'\n        else:\n                response.flash = \'please fill the form\'\n        return dict(form=form)\n\n\ndef setup():\n    if (request.vars):\n\tvalue=request.vars\n    \tvariable=value.keys()\n\t#check what order put in - exp_id set and variableData is being reviewd\n        if (variable[0]=="experiment_id"):\n\t\tvariableData=variable[1]\n\t\texp_id=value[variable[0]]\n\telse:\n\t    try:\n\t\tvariableData=variable[0]\n\t\texp_id=value[variable[1]]\n\t    except:\n\t\treturn " You need to provide experiment id"\n\t#setup has all paraamenter set\n\n        ret=db.setupExperiment((db.setupExperiment.name==variableData) & (db.setupExperiment.experiment_id==exp_id))\n\t#if this experiment data not entered yet\n\tif (ret==None):\n\t\tif value[variableData]!="":\n\t\t\tdb.setupExperiment.insert(name=variableData, valueString=value[variableData], experiment_id=exp_id)\n                \tdb.commit()\n\t\t\treturnvar= dict([(variableData,str(value[variableData])),("experimental_id",exp_id)])\n\t\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\t\telse:\n\t\t\treturn "Please enter value for "+variableData\n    \tif (value[variableData]!=""):\n        \tif value[variableData]=="0":\n                \tret.update_record(valueString=0)\n        \telse:\n\t\t\tret.update_record(valueString=value[variableData])\n\n\treturnvar= dict([(variableData,str(ret.valueString)),("experimental_id",exp_id)])\n    \treturn gluon.contrib.simplejson.dumps(returnvar)\n    else:\n\tform\n        return "Error no parameter provided to read from data"\n   \ndef experiment():\n    type=[\'Unknown\',\'stag and hare\', \'coin effort\']\n    if (request.vars):\n        value=request.vars\n        variable=value.keys()\n\t## if id given\n        if (value[\'id\']>0):\n\t\tret=db.experiment(db.experiment.id==value[\'id\'])\n\telse:\n\t\t\n\t##check if exists by title and return id\n\t\tret=db.experiment(db.experiment.title==value[\'title\'])\n        if (ret!=None):\n\t\t##return if already found\n\t\treturnvar = dict([("id",ret["id"])])\n\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\n\telse:\n\t\t#create if can, if not send error\n\t\ttry:\n\t\t\tret=db.experiment.insert(title=value[\'title\'], typeExperiment=type[int(value[\'type\'])], rounds=value[\'rounds\'])\n                \tdb.commit()\n\t\t\treturnvar = dict([("id",ret[\'id\']), ("title",ret[\'title\']),("typeExperiment",ret[\'typeExperiment\']),("rounds",ret[\'rounds\'])])\n\t\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\n\t\texcept Exception, e:\n\t\t\t\n\t\t\treturn "Error no parameter or incorrect parameter provided for data entry [title,type,rounds(number): %s" %e\n\n    else:\n        return "Error no parameter provided to read from data"\n\ndef check_part(value, stage_id):\n    type=[\'Request\', \'Receive\', \'Wait\',\'End\']\n    # not return if not all participants ready\n    participants=db((db.results.experiment_id==value[\'experiment_id\'])&(db.results.stage_id==stage_id)&(db.results.name=="response"))\n    parts=db(db.experiment_participant.experiment_id==value[\'experiment_id\'])\n    if int(participants.count())<int(parts.count()):\n        returnvar = dict([("id",value["id"]),("experiment_id",value[\'experiment_id\']), ("stage_number",value[\'stage_number\']),("type_stage",type[2])])\n\treturn gluon.contrib.simplejson.dumps(returnvar)\n\ndef stages():\n    type=[\'Request\', \'Response\', \'Wait\',\'End\']\n    # not return if not all participants\n    if (request.vars):\n        value=request.vars\n        variable=value.keys()\n\tstage_number=int(value["stage_number"])\n\tif stage_number>0:\n\t   try:\n                ret=db.stages((db.stages.experiment_id==value[\'experiment_id\'])&(db.stages.stage_number==(int(value["stage_number"]))))\n                stage_id=db.stages(db.stages.stage_number==stage_number).id\n\n           except Exception, e:\n                return "Stage_number required "+str(e)\n\t   if (ret==None): step=type[2]\n\t   else: step=ret.type_stage\n##check if participants full or results full as appropraite for that stage\n\t   if step==type[1] or step==type[2]:\n\t\ttypeS="participants"\n\t   else:\n\t\ttypeS="results"\t\n        ## if id given\n        if (value[\'id\']>0):\n                ret=db.stages(db.stages.id==value[\'id\'])\n\n\tif (stage_number==0 or complete(value,typeS, stage_id)):\n\t\t#completed stage\n\t\tstage_number+=1\n\n        ##check if exists by exp and stage number and return id\n        \tret=db.stages((db.stages.experiment_id==value[\'experiment_id\'])&(db.stages.stage_number==stage_number))\n        \tif (ret!=None):\n                ##return if already found\n                \treturnvar = dict([("id",ret["id"]),("experiment_id",ret[\'experiment_id\']), ("stage_number",ret[\'stage_number\']),("type_stage",ret[\'type_stage\']),("message",ret[\'message\'])])\n                \treturn gluon.contrib.simplejson.dumps(returnvar)\n\n        \telif value[\'stage_number\']>0:  \n##skip error in entry\n                #create if can, if not send error\n                \ttry:\n                        \tret=db.stages.insert(experiment_id=value[\'experiment_id\'], type_stage=type[int(value[\'type\'])],stage_number=value[\'stage_number\'] )\n                        \tdb.commit()\n                        \treturnvar = dict([("id",ret[\'id\']),("experiment_id",ret[\'experiment_id\']),("stage_number",ret[\'stage_number\']),("type_stage",ret[\'type_stage\']),("message",ret[\'message\'])])\n                        \treturn gluon.contrib.simplejson.dumps(returnvar)\n\n                \texcept Exception, e:\n\n                        \treturn "Error no parameter or incorrect parameter provided for data entry [experiment_id,stage_number, type]: %s" %e\n\telse:\n\t\treturn "Stage not complete"\n    else:\n        return "Error no parameter provided to read from data eg check stage_number>0"\n\ndef get_round():\n\n    if request.vars:\n        value=request.vars\n        ret=db.setupExperiment((db.setupExperiment.experiment_id==value[\'experiment_id\'])&(db.setupExperiment.name=="rounds"))\n    \tif ret!=None:\n\t\t\n\t\tround_id= ret[\'valueString\']\n    \telse:\n\t\tround_id=1\n\treturnvar=dict([("round_id",round_id)])\n        return gluon.contrib.simplejson.dumps(returnvar)\n    else: \n\treturn "Unknown experiment"\n\ndef next_round():\n    if request.vars:\n\tvalue=request.vars\n\tret=db((db.results.experiment_id==value[\'experiment_id\']))\n\trounds=[]\n\tif ret!=None: \n\t\trounds=ret.select()\n\texp_id=value[\'experiment_id\']\n\tround_id=1\n\tfor row in rounds:\n\t\tif row["round_id"]>=round_id:\t\n\t\t\tround_id=row["round_id"]+1\n\t##add to setupExp\n\tret=db.setupExperiment((db.setupExperiment.name=="rounds") & (db.setupExperiment.experiment_id==exp_id))\n\tif ret!=None:\n\t\tret.update(valueString=round_id)\n\telse:\n\t \tdb.setupExperiment.insert(name="rounds", valueString=round_id, experiment_id=exp_id)\n\tdb.commit()\t\t\n\treturnvar=dict([("round_id",round_id)])\n        return gluon.contrib.simplejson.dumps(returnvar)\n\t\n##resets experimetn\ndef delete_results():\n    if (request.vars):\n        value=request.vars\n        variable=value.keys()\n\n \tret=db((db.results.experiment_id==value[\'experiment_id\'])&(db.results.round_id==value[\'round_id\']))\n\tret.delete();\n\treturn "Done"\n\ndef exportCSV():\n     input=request.args[0]\n\n     experiment_id=int(input[19:])\n     results=db(db.experiment.id==experiment_id).select()\n     return dict(results=results)\n\ndef results():\n    if (request.vars):\n        value=request.vars\n        variable=value.keys()\n\tstage_id=0\n\n\ttry:\n\t\tret=db.stages((db.stages.experiment_id==value[\'experiment_id\'])&(db.stages.stage_number==value["stage_number"]))\n        \tstage_number=value["stage_number"]\n        \tstage_id=db.stages(db.stages.stage_number==stage_number).id\n\n\texcept Exception, e:\n\t\t##not selected a stage_number\n        \tstage_id=0\n\t## if id given\n        if (value[\'id\']>0):\n\n                ret=db.results(db.results.id==value[\'id\'])\n\t\treturn dict(results=ret)\n\t#request to print results for all rounds\n        elif value[\'name\']=="Results":\n\t\texp_id=int(value["experiment_id"])\n \t\tif (stage_id!=0):\n\n                        if (value[\'round_id\']!="") & (value["round_id"]!=None) : ret=db((db.results.experiment_id==exp_id)&(db.results.stage_id==stage_id)&(db.results.round_id==value[\'round_id\'])).select()\n\n                        else: ret=db((db.results.experiment_id==value[\'experiment_id\'])&(db.results.stage_id==stage_id)).select()\n                elif (value[\'round_id\']!="") & (value["round_id"]!=None): ret=db((db.results.experiment_id==exp_id)&(db.results.round_id==value[\'round_id\'])).select()\n                else:  ret=db((db.results.experiment_id==exp_id)).select()\n\t\texp=db.experiment(db.experiment.id==exp_id)\n\t\tlogging.warn(experiment)\n\t\tstages=db(db.stages.experiment_id==exp_id).select()\n                parameters=db(db.setupExperiment.experiment_id==exp_id).select()\n\t\treturn dict(results=ret, exp=exp, parameters=parameters,stages=stages)\n\n\telif value[\'name\']=="Result":\n\t\tlogging.warn(stage_id)\n\t\tpart_result=db.results((db.results.experiment_id==value[\'experiment_id\'])&(db.results.stage_id==stage_id)&(db.results.round_id==value[\'round_id\'])&(db.results.participant_id==value[\'participant_id\']))[\'valueString\']\n\t\tresult=add_results(dict([("experiment_id",value[\'experiment_id\']),("stage_id",stage_id),("round_id",value[\'round_id\'])]))\n\t\texp_type=db.experiment(db.experiment.id==value[\'experiment_id\'])\n\t\tif exp_type.typeExperiment=="coin effort":\n\t\t\ta=db.setupExperiment((db.setupExperiment.name=="a_parameter")&(db.setupExperiment.experiment_id==value[\'experiment_id\']))[\'valueString\']\n\n\t\t\tb=db.setupExperiment((db.setupExperiment.name=="b_parameter")&(db.setupExperiment.experiment_id==value[\'experiment_id\']))[\'valueString\']\n\n\t\t\tresult=float(a)*float(result)-float(b)*float(part_result)\n\t\telse:\n\t\t\tpass\n\t\treturnvar=dict([("message","Your return is: "),("Results",result)])\n\t\tlogging.warn("Result")\n\t\tlogging.warn(results)\n\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\telse:\n        ##check if exists by exp and stage number and return id\n                try:\n\t\t\tresultEnter=db.results((db.results.experiment_id==value[\'experiment_id\'])&(db.results.participant_id==value[\'participant_id\'])&(db.results.round_id==value[\'round_id\'])&(db.results.stage_id==stage_id)&(db.results.name==value[\'name\'])&(db.results.valueString==int(value[\'value\'])))\n\t\texcept Exception , e:\n\t\t\treturn "Incorrect call to api: "+str(e)\n\tif (resultEnter!=None):\n                ##return if already found\n                returnvar = dict([("id",resultEnter["id"]),("experiment_id",resultEnter[\'experiment_id\']),("stage_id",stage_number),("round_id",resultEnter[\'round_id\']),("name",resultEnter["name"]),("value",resultEnter[\'valueString\'])])\n                return gluon.contrib.simplejson.dumps(returnvar)\n\n        else:\n                try:\n                        ret=db.results.insert(experiment_id=value[\'experiment_id\'], participant_id=value[\'participant_id\'],stage_id=stage_id,round_id=value[\'round_id\'],name=value[\'name\'],valueString=int(value[\'value\']))\n                        db.commit()\n                        returnvar = dict([("id",ret["id"]),("experiment_id",ret[\'experiment_id\']),("stage_number",stage_number),("round_id",ret[\'round_id\']),("name",ret["name"]),("value",ret[\'valueString\'])])\n\t\t\treturn gluon.contrib.simplejson.dumps(returnvar)\n\n                except Exception, e:\n\n                        return "Error no parameter or incorrect parameter provided for data entry [experiment_id,participant_id, round_id,name,value]: %s" %e\n\n    else:\n        return "Error no parameter provided to read from data"\n\ndef add_results(variable):\n\tresults=db((db.results.experiment_id==variable[\'experiment_id\'])&(db.results.stage_id==variable[\'stage_id\'])& (db.results.round_id==variable[\'round_id\'])).select()\n\treturnResult=[]\n\tfor res in results:\t\n\t\treturnResult.append(res.valueString)\n\tret=min(returnResult)\n\treturn ret\n\t\t\n\ndef complete(value,step, stage_id):\n        variable=value.keys()\n        max_participants=db.setupExperiment((db.setupExperiment.name=="max_participants")&(db.setupExperiment.experiment_id==value[\'experiment_id\']))[\'valueString\']\n\tif step=="participants":parts=db(db.experiment_participant.experiment_id==value[\'experiment_id\'])\n\tif step=="results":parts=db((db.results.experiment_id==value[\'experiment_id\'])&(db.results.round_id==value[\'round_id\'])&(db.results.stage_id==stage_id))\n\tif int(parts.count())>=int(max_participants):\n\t\treturn True\n\telse:\n\t\treturn False\n\n \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(results)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/local/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/usr/local/web2py/applications/ZTree/controllers/experiments.py", line 482, in <module>\n  File "/usr/local/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/local/web2py/applications/ZTree/controllers/experiments.py", line 411, in results\n    part_result=db.results((db.results.experiment_id==value[\'experiment_id\'])&(db.results.stage_id==stage_id)&(db.results.round_id==value[\'round_id\'])&(db.results.participant_id==value[\'participant_id\']))[\'valueString\']\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.